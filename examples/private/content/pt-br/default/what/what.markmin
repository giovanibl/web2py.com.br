## O que é web2py``TM``:sup ?

---------------
A melhor maneira de usar o web2py, é experimentá-lo.
Você pode usar ele online [[aqui http://www.web2py.com/demo_admin]]
Esta é a versão idêntica do atual web2py, embora que algumas funções estão desativadas por segurança.
---------------
web2py foi inspirado de Ruby on Rails e, como Rails, ele foca no desenvolvimento ágil e segue o modelo MVC. webp2y difere de Rails porque ele é baseado em Python (assim ele é rápido e mais escalável), porque ele provêm  de uma interface web administrativa abrangente (com isso não há necessidade de digitar comandos no shell, caso não queira), incluindo bibliotecas para manipular vários protocolos (por exemplo XML-RPC e feeds RSS), e pode ser executado no Google App Engine.

web2py foi inspirado também de Django e, como Django, ele tem a capacidade de gerar formulários a partir das tabelas do banco de dados e os inclui um amplo conjunto de validadores. Mas o web2py difere de Django porque ele é mais compacto, fácil de aprender e não possui arquivos de configuração a nível de projeto.

web2py is less verbose than Java-based frameworks and its syntax is much cleaner than PHP-based frameworks. This makes applications simpler to develop, and easier to read and maintain.

---------------
[[Here http://www.web2py.com/examples/static/web2py_vs_others.pdf]] is a features comparison of web2py vs other popular web frameworks
---------------

web2py comes in source code version (for any Operating System that runs Python) and in binary versions for OSX and Windows. web2py does not need to be installed. You unzip it, click on it, and choose a one-time administrator password. It then opens the browser for you and directs you to the administrative interface. Everything it needs to make this happen (the Python interpreter, the web-server, the relational database, etc.) is already packaged with web2py. If you need more power you customize your applications to use your preferred web-server (for example Apache) and your preferred database engine (for example PostgreSQL or Oracle).

Via the admin interface you can upload a packed application, create a new application, design an application, maintain an existing application, bytecode-compile an application, pack and download an application. Everything can be done via the web-based admin interface, including editing the files that comprise your applications, clearing temp files, browsing past tickets/errors, run tests, interact with the database. If you so choose, it is also possible to interact with web2py via the Operating System shell or the Python shell.

Any web2py application is comprised of Models (files that contain a description of the data representation), Views (files that contain a description of the data presentation), Controllers (files that contain a description of the business logic and workflow), Cron Jobs (tasks that need to be executed regularly in background), Modules (collections of reusable classes and functions), and Static Files (images, scripts, stylesheets, etc.).

Controllers consist of functions that are associated to a URL and are called when the associated URL is visited. Models are executed before the function is called, independently on the visited URL (for each app). Views are called when the function returns data other than a string, and renders the data in the proper format (for example html).

#### A web2py application can be as simple as a single file (controllers/default.py) containing:


``
def index(): return "Hello World"',counter=None,_class='boxCode')
``:python


When **http://localhost:8000/app/default/index** is visited the function is called and it displays the message "Hello World".


#### Here is a more complex complete application that lets the visitor upload images into a database:


``
# in Model
db=DAL('sqlite://storage.db')
db.define_table('image', 
                Field('name'),
                Field('file','upload'))
``:python


``
# in Controller
def index():
    form = SQLFORM(db.image)
    if form.accepts(request.vars, session):
        response.flash = 'image uploaded'
    return dict(form = form)
``:python

``
# in View
{{extend 'layout.html'}}
<h1>Image upload form</h1>
{{= form}}
``:python

Uploaded images are safely renamed to avoid directory traversal vulnerabilities, stored on the filesystem (or database) and a corresponding entry is inserted in the database, linking the file. A built-in mechanism prevents involuntary double form submission. All DB IO is transaction safe by default. Any exception in the code causes the transaction to rollback.

---------------
Examples of more complex sample applications can be found [[here http://web2py.com/examples/default/examples]]
---------------
